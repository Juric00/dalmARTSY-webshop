// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dalmARTSY_Test.Data;

#nullable disable

namespace dalmARTSY_Test.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("dalmARTSY_Test.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "edb27c1d-d9de-4ae7-8206-fec010a5004b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a61c454-c10e-4664-8f84-951de87d5149",
                            Email = "artsupport@mail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTSUPPORT@MAIL.COM",
                            NormalizedUserName = "DALMART_IT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOpzo0I8rpqtUC/CmmOVZJY891rliM0DdCGZkWg9pPZCHIwexcfm3v/zz/Z+EzK90g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0981ae09-5dee-48b8-bc06-2ca08af38a31",
                            TwoFactorEnabled = false,
                            UserName = "dalmART_IT"
                        });
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "dalmARTSY's paintings are snapshot of an artist's imagination, captured in a moment of time and made tangible through the artist's medium and techniques. ",
                            Image = "painting_category.jpg",
                            Title = "Painting"
                        },
                        new
                        {
                            Id = 2,
                            Description = "dalmARTSY's photographers shows the world through the lenses of camera. ",
                            Image = "photography_category.jpg",
                            Title = "Photography"
                        },
                        new
                        {
                            Id = 3,
                            Description = "dalmaRTSY's digital art is a fusion of technology and creativity, where artist's medium is pixel.",
                            Image = "digital_art_category.jpg",
                            Title = "Digital Art"
                        },
                        new
                        {
                            Id = 4,
                            Description = "dalmaARTSY's drawing represents raw emotions and ideas often created with emphasis on the lines and shapes using pencil with linear quality. ",
                            Image = "drawing_category.jpg",
                            Title = "Drawing"
                        },
                        new
                        {
                            Id = 5,
                            Description = "dalmARTSY's mixed media is a combination of traditional and non-traditional art materials and techniques where artist use their imagination to combine different textures, colors and shapes to make one-of-a-kind art that defies categorization",
                            Image = "mixed_media_category.jpg",
                            Title = "Mixed Media"
                        });
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArtCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool?>("Frame")
                        .HasColumnType("bit");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtCode = "PA100",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ... update needed ",
                            Frame = false,
                            Height = 50m,
                            Image = "the_angel.jpeg",
                            InStock = 2,
                            Price = 80.99m,
                            Title = "The One with Angel",
                            Width = 80m
                        },
                        new
                        {
                            Id = 2,
                            ArtCode = "PA101",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 120m,
                            Image = "shining_one.jpeg",
                            InStock = 1,
                            Price = 120.50m,
                            Title = "The One that Shines",
                            Width = 40m
                        },
                        new
                        {
                            Id = 3,
                            ArtCode = "PA102",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 50m,
                            Image = "the_olive.jpeg",
                            InStock = 1,
                            Price = 50.99m,
                            Title = "The Olives",
                            Width = 60m
                        },
                        new
                        {
                            Id = 4,
                            ArtCode = "PA103",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 40m,
                            Image = "bubble.jpeg",
                            InStock = 5,
                            Price = 160.00m,
                            Title = "The Bubble",
                            Width = 65m
                        },
                        new
                        {
                            Id = 5,
                            ArtCode = "PA104",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...",
                            Frame = true,
                            Height = 120m,
                            Image = "the_silly_one.jpeg",
                            InStock = 7,
                            Price = 120.99m,
                            Title = "The Silly PopArt",
                            Width = 50m
                        },
                        new
                        {
                            Id = 6,
                            ArtCode = "PA105",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 120m,
                            Image = "the_two.jpeg",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "The One with Two",
                            Width = 50m
                        },
                        new
                        {
                            Id = 7,
                            ArtCode = "PA106",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 70m,
                            Image = "the_afternoon.jpeg",
                            InStock = 2,
                            Price = 100m,
                            Title = "The Afternoon",
                            Width = 40m
                        },
                        new
                        {
                            Id = 8,
                            ArtCode = "PA107",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 120m,
                            Image = "dots.jpeg",
                            InStock = 2,
                            Price = 89.00m,
                            Title = "The Dots",
                            Width = 70m
                        },
                        new
                        {
                            Id = 9,
                            ArtCode = "PA108",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 40m,
                            Image = "summer.jpeg",
                            InStock = 1,
                            Price = 75.00m,
                            Title = "Summers",
                            Width = 60m
                        },
                        new
                        {
                            Id = 10,
                            ArtCode = "PA109",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 60m,
                            Image = "heart.jpeg",
                            InStock = 5,
                            Price = 79.00m,
                            Title = "Heartsy",
                            Width = 80m
                        },
                        new
                        {
                            Id = 11,
                            ArtCode = "PA110",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 50m,
                            Image = "dalsea.jpeg",
                            InStock = 1,
                            Price = 90.99m,
                            Title = "Dalsea and beach",
                            Width = 35m
                        },
                        new
                        {
                            Id = 12,
                            ArtCode = "PA111",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 120m,
                            Image = "casual.jpeg",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Casual Pop",
                            Width = 70m
                        },
                        new
                        {
                            Id = 13,
                            ArtCode = "PA112",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 120m,
                            Image = "darkfall.jpeg",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Dark Fall",
                            Width = 30m
                        },
                        new
                        {
                            Id = 14,
                            ArtCode = "PA113",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 40m,
                            Image = "wings.jpeg",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Wingsy",
                            Width = 70m
                        },
                        new
                        {
                            Id = 15,
                            ArtCode = "PA114",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 20m,
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Objects",
                            Width = 40m
                        },
                        new
                        {
                            Id = 16,
                            ArtCode = "PA115",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 20m,
                            Image = "lovefall.jpeg",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Fall-in in Love",
                            Width = 40m
                        },
                        new
                        {
                            Id = 17,
                            ArtCode = "PH100",
                            Author = "Rhamely Wyunko",
                            CategoryId = 2,
                            Description = "Description ... update needed ",
                            Frame = false,
                            Height = 50m,
                            Image = "books.jpeg",
                            InStock = 2,
                            Price = 80.99m,
                            Title = "The One with Books",
                            Width = 60m
                        },
                        new
                        {
                            Id = 18,
                            ArtCode = "PH101",
                            Author = "Dimitro Franz",
                            CategoryId = 2,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 80m,
                            Image = "house.jpeg",
                            InStock = 1,
                            Price = 120.50m,
                            Title = "The One with House",
                            Width = 80m
                        },
                        new
                        {
                            Id = 19,
                            ArtCode = "PH102",
                            Author = "Daniel Torbekov",
                            CategoryId = 2,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 100m,
                            Image = "deep.jpeg",
                            InStock = 1,
                            Price = 50.99m,
                            Title = "Deep Dive",
                            Width = 120m
                        },
                        new
                        {
                            Id = 20,
                            ArtCode = "PH103",
                            Author = "Chris Cermak",
                            CategoryId = 2,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 40m,
                            Image = "mountain.jpeg",
                            InStock = 5,
                            Price = 160.00m,
                            Title = "The Mountain",
                            Width = 40m
                        },
                        new
                        {
                            Id = 21,
                            ArtCode = "PH104",
                            Author = "Quang Ngueyn",
                            CategoryId = 2,
                            Description = "Description ...",
                            Frame = false,
                            Height = 30m,
                            Image = "stones.jpeg",
                            InStock = 7,
                            Price = 24.99m,
                            Title = "The Stones",
                            Width = 20m
                        },
                        new
                        {
                            Id = 22,
                            ArtCode = "DA100",
                            Author = "Rotislav Uzunov",
                            CategoryId = 3,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 100m,
                            Image = "square.jpeg",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "The Square",
                            Width = 140m
                        },
                        new
                        {
                            Id = 23,
                            ArtCode = "DA101",
                            Author = "Mo Eid",
                            CategoryId = 3,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 100m,
                            Image = "tree.jpeg",
                            InStock = 2,
                            Price = 50.9m,
                            Title = "The Tree",
                            Width = 40m
                        },
                        new
                        {
                            Id = 24,
                            ArtCode = "DA102",
                            Author = "Rodion Kutsayev",
                            CategoryId = 3,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 50m,
                            Image = "doors.jpeg",
                            InStock = 2,
                            Price = 89.00m,
                            Title = "The Doors",
                            Width = 100m
                        },
                        new
                        {
                            Id = 25,
                            ArtCode = "DR100",
                            Author = "Tayla Walls",
                            CategoryId = 4,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 40m,
                            Image = "eye.jpeg",
                            InStock = 1,
                            Price = 75.00m,
                            Title = "The Eye",
                            Width = 60m
                        },
                        new
                        {
                            Id = 26,
                            ArtCode = "DR101",
                            Author = "David Guerrero",
                            CategoryId = 4,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 60m,
                            Image = "face.jpeg",
                            InStock = 5,
                            Price = 79.00m,
                            Title = "The Face",
                            Width = 80m
                        },
                        new
                        {
                            Id = 27,
                            ArtCode = "MM100",
                            Author = "Steve Johnson",
                            CategoryId = 5,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 100m,
                            Image = "mixy.jpeg",
                            InStock = 1,
                            Price = 90.99m,
                            Title = "The Mixy",
                            Width = 140m
                        },
                        new
                        {
                            Id = 28,
                            ArtCode = "MM101",
                            Author = "Velroy Fernandes",
                            CategoryId = 5,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 20m,
                            Image = "divinginto",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Diving Into",
                            Width = 40m
                        },
                        new
                        {
                            Id = 29,
                            ArtCode = "MM102",
                            Author = "Steve Johnson",
                            CategoryId = 5,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 20m,
                            Image = "reddot",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "The red Dot",
                            Width = 40m
                        },
                        new
                        {
                            Id = 30,
                            ArtCode = "MM103",
                            Author = "Zakuskek Ayar",
                            CategoryId = 5,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 20m,
                            Image = "zeta",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Zeta Blue",
                            Width = 40m
                        });
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.ProductStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StyleId");

                    b.ToTable("ProductStyles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            StyleId = 2
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 5,
                            StyleId = 3
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 6,
                            StyleId = 3
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 7,
                            StyleId = 3
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 7,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 8,
                            StyleId = 3
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 8,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 9,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 10,
                            StyleId = 3
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 10,
                            StyleId = 2
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 11,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 12,
                            StyleId = 3
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 13,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 13,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 19,
                            ProductId = 14,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 20,
                            ProductId = 14,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 21,
                            ProductId = 15,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 22,
                            ProductId = 16,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 23,
                            ProductId = 16,
                            StyleId = 2
                        },
                        new
                        {
                            Id = 24,
                            ProductId = 17,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 25,
                            ProductId = 18,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 26,
                            ProductId = 19,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 27,
                            ProductId = 19,
                            StyleId = 2
                        },
                        new
                        {
                            Id = 28,
                            ProductId = 20,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 29,
                            ProductId = 21,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 30,
                            ProductId = 22,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 31,
                            ProductId = 22,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 32,
                            ProductId = 23,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 33,
                            ProductId = 24,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 34,
                            ProductId = 24,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 35,
                            ProductId = 25,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 36,
                            ProductId = 25,
                            StyleId = 2
                        },
                        new
                        {
                            Id = 37,
                            ProductId = 26,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 38,
                            ProductId = 26,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 39,
                            ProductId = 27,
                            StyleId = 4
                        },
                        new
                        {
                            Id = 40,
                            ProductId = 27,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 41,
                            ProductId = 27,
                            StyleId = 2
                        },
                        new
                        {
                            Id = 42,
                            ProductId = 28,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 43,
                            ProductId = 28,
                            StyleId = 5
                        },
                        new
                        {
                            Id = 44,
                            ProductId = 29,
                            StyleId = 1
                        },
                        new
                        {
                            Id = 45,
                            ProductId = 29,
                            StyleId = 2
                        },
                        new
                        {
                            Id = 46,
                            ProductId = 30,
                            StyleId = 2
                        });
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "It emphasized the exploration of color, form, and composition, often challenging traditional notions of beauty and realism.",
                            Title = "Modern"
                        },
                        new
                        {
                            Id = 2,
                            About = "Abstract art is characterized by the use of shapes, colors, and forms that are not intended to represent any specific object or recognizable image.",
                            Title = "Abstract"
                        },
                        new
                        {
                            Id = 3,
                            About = "A style that emerged in the 1950s and 60s, characterized by the use of popular culture imagery and objects, such as advertisements, comic books, and everyday consumer products. It often employs bright colors, bold lines, and a sense of humor or irony to critique and comment on contemporary society and mass media.",
                            Title = "Pop Art"
                        },
                        new
                        {
                            Id = 4,
                            About = "Inspired by architecture.Buildings and urban spaces offer a range of textures, forms, and colors, which artists can use to create dynamic and expressive compositions that capture the character and atmosphere of a particular place. ",
                            Title = "Architecture"
                        },
                        new
                        {
                            Id = 5,
                            About = "Refers to a broad range of styles that prioritize the emotional and psychological content of the artwork over realistic representation. It often features exaggerated forms, vibrant colors, and bold brushwork to create a powerful visual impact and convey intense emotions or subjective experiences",
                            Title = "Expressionist"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9ce0f798-67a5-4957-adae-c1e2bb402f74",
                            ConcurrencyStamp = "c8c0b890-8fb2-4beb-b7d7-b81335c59256",
                            Name = "dalmARTmin",
                            NormalizedName = "DALMARTMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "edb27c1d-d9de-4ae7-8206-fec010a5004b",
                            RoleId = "9ce0f798-67a5-4957-adae-c1e2bb402f74"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Order", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.OrderItem", b =>
                {
                    b.HasOne("dalmARTSY_Test.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dalmARTSY_Test.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Product", b =>
                {
                    b.HasOne("dalmARTSY_Test.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.ProductStyle", b =>
                {
                    b.HasOne("dalmARTSY_Test.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dalmARTSY_Test.Models.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
