// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dalmARTSY_Test.Data;

#nullable disable

namespace dalmARTSY_Test.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230429075503_DataSeedAllModels")]
    partial class DataSeedAllModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("dalmARTSY_Test.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "edb27c1d-d9de-4ae7-8206-fec010a5004b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1d71766-e8a0-4b03-a409-e12914db3597",
                            Email = "artsupport@mail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTSUPPORT@MAIL.COM",
                            NormalizedUserName = "DALMART_IT",
                            PasswordHash = "AQAAAAEAACcQAAAAEEG2njC2mm+aXQstYT42c4/d41kC1IwGP32deW9IqhTOiGSgadkZXj/v5YNeHeTFmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1574435-1461-484e-9a34-769b849ae46c",
                            TwoFactorEnabled = false,
                            UserName = "dalmART_IT"
                        });
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "dalmARTSY's paintings are snapshot of an artist's imagination, captured in a moment of time and made tangible through the artist's medium and techniques. ",
                            Image = "painting_category.jpg",
                            Title = "Painting"
                        },
                        new
                        {
                            Id = 2,
                            Description = "dalmARTSY's photographers shows the world through the lenses of camera. ",
                            Image = "photography_category.jpg",
                            Title = "Photography"
                        },
                        new
                        {
                            Id = 3,
                            Description = "dalmaRTSY's digital art is a fusion of technology and creativity, where artist's medium is pixel.",
                            Image = "digital_art_category.jpg",
                            Title = "Digital Art"
                        },
                        new
                        {
                            Id = 4,
                            Description = "dalmaARTSY's drawing represents raw emotions and ideas often created with emphasis on the lines and shapes using pencil with linear quality. ",
                            Image = "drawing_category.jpg",
                            Title = "Drawing"
                        },
                        new
                        {
                            Id = 5,
                            Description = "dalmARTSY's mixed media is a combination of traditional and non-traditional art materials and techniques where artist use their imagination to combine different textures, colors and shapes to make one-of-a-kind art that defies categorization",
                            Image = "mixed_media_category.jpg",
                            Title = "Mixed Media"
                        });
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArtCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool?>("Frame")
                        .HasColumnType("bit");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtCode = "PA100",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ... update needed ",
                            Frame = false,
                            Height = 50m,
                            Image = "the_one_with_blue_angel.jpg",
                            InStock = 2,
                            Price = 80.99m,
                            Title = "The One with Blue Angel",
                            Width = 60m
                        },
                        new
                        {
                            Id = 2,
                            ArtCode = "PA101",
                            Author = "Lukrecija Juric",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 80m,
                            Image = "the_one_that_shines.jpg",
                            InStock = 1,
                            Price = 120.50m,
                            Title = "The One that Shines",
                            Width = 80m
                        },
                        new
                        {
                            Id = 3,
                            ArtCode = "D100",
                            Author = "Irena Martinic",
                            CategoryId = 4,
                            Description = "Description ...update needed",
                            Frame = false,
                            Height = 100m,
                            Image = "sunset_in_vala.jpg",
                            InStock = 1,
                            Price = 50.99m,
                            Title = "Sunset in Vala",
                            Width = 120m
                        },
                        new
                        {
                            Id = 4,
                            ArtCode = "MM100",
                            Author = "Keti Zuvic",
                            CategoryId = 5,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 40m,
                            Image = "portrait_of_a_woman.jpg",
                            InStock = 5,
                            Price = 160.00m,
                            Title = "Portrait of a woman",
                            Width = 40m
                        },
                        new
                        {
                            Id = 5,
                            ArtCode = "PH100",
                            Author = "Pero Dragicevic",
                            CategoryId = 2,
                            Description = "Description ...",
                            Frame = false,
                            Height = 30m,
                            Image = "our_people.jpg",
                            InStock = 7,
                            Price = 24.99m,
                            Title = "Our People",
                            Width = 20m
                        },
                        new
                        {
                            Id = 6,
                            ArtCode = "PA102",
                            Author = "Branka Kusanovic",
                            CategoryId = 1,
                            Description = "Description ...update needed",
                            Frame = true,
                            Height = 100m,
                            Image = "just_an_object.jpg",
                            InStock = 3,
                            Price = 70.00m,
                            Title = "Just an Object",
                            Width = 140m
                        });
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.ProductStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StyleId");

                    b.ToTable("ProductStyles");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "It emphasized the exploration of color, form, and composition, often challenging traditional notions of beauty and realism.",
                            Title = "Modern"
                        },
                        new
                        {
                            Id = 2,
                            About = "Abstract art is characterized by the use of shapes, colors, and forms that are not intended to represent any specific object or recognizable image.",
                            Title = "Abstract"
                        },
                        new
                        {
                            Id = 3,
                            About = "A style that emerged in the 1950s and 60s, characterized by the use of popular culture imagery and objects, such as advertisements, comic books, and everyday consumer products. It often employs bright colors, bold lines, and a sense of humor or irony to critique and comment on contemporary society and mass media.",
                            Title = "Pop Art"
                        },
                        new
                        {
                            Id = 4,
                            About = "Inspired by architecture.Buildings and urban spaces offer a range of textures, forms, and colors, which artists can use to create dynamic and expressive compositions that capture the character and atmosphere of a particular place. ",
                            Title = "Architecture"
                        },
                        new
                        {
                            Id = 5,
                            About = "Refers to a broad range of styles that prioritize the emotional and psychological content of the artwork over realistic representation. It often features exaggerated forms, vibrant colors, and bold brushwork to create a powerful visual impact and convey intense emotions or subjective experiences",
                            Title = "Expressionist"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9ce0f798-67a5-4957-adae-c1e2bb402f74",
                            ConcurrencyStamp = "01ac5296-fb64-4ecd-8786-c7326cd5fa56",
                            Name = "dalmARTmin",
                            NormalizedName = "DALMARTMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "edb27c1d-d9de-4ae7-8206-fec010a5004b",
                            RoleId = "9ce0f798-67a5-4957-adae-c1e2bb402f74"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Order", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.OrderItem", b =>
                {
                    b.HasOne("dalmARTSY_Test.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dalmARTSY_Test.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.Product", b =>
                {
                    b.HasOne("dalmARTSY_Test.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("dalmARTSY_Test.Models.ProductStyle", b =>
                {
                    b.HasOne("dalmARTSY_Test.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dalmARTSY_Test.Models.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dalmARTSY_Test.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
